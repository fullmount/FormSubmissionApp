Task 2:
Now, let's imagine the web forms support large attachments (~100MB). Describe in text how to handle storage and downloads from the submissions list, considering thousands of submissions with multiple attachments each. Include architecture, data structure, and REST API.


Architecture:
1. Frontend
 - provides UI for attachment upload/download process
 - receives submission metadata with attachment references from backend

2. Backend
 - handles attachments storage via cloud(AWS, Azure, etc..)
 - uses database to manage submission metadata and attachment references
 - provides API for upload/download

3. Storage
 - database stores submission and its metadata(submission details, filename, url...)
 - cloud storage stores actual attachment files

Data structure(Database)
1. Submission table with necessary fields

2. Attachment table with foreign key to submission table(SubmissionId) and fields like FileName, FileSize, StorageUrl...)

REST API
1. Get list of submissions with attachments
 [HttpGet(/api/v1/submissions)] 
 receives json like:
 [
  {
    "id": 1,
    ...
    "attachments": [
      {
        "attachmentId": 11,
        "fileName": "attachment.doc",
        "fileSize": 5456545,
  	...
      }
    ]
  }
 ]

2. Upload attachment - [HttpPost(/api/v1/submissions/{id}/attachments/upload)]
 - streams attachment file to cloud storage directly
 - stores metadata(including link to actual file stored on cloud storage provider) in attachments table in database

3. Download attachment - [HttpGet(/api/v1/attachments/{attachmentId}/download)]
 - streams attachment from cloud storage URL directly(by segments in case of a large file)

For security reasons we should consider:
 - give access to upload/download functionality only to registered users based on user permissions
 - restrict file types and file size